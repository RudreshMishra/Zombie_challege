sample_elevation =crop_center(new_elevation_mean,20,20)

sample_population =crop_center(new_population_mean,20,20)

sample_population[4][2]

zombies = np.zeros((sample_population.shape[0], sample_population.shape[1],15))
Human_population= np.ceil(sample_population * 3000 * 15 * 15)
Human_population[4][2]
zombies[4][2][0]=math.floor(Human_population[4][2])
Human_population[4][2]=0.0

zombies_2d_array = np.sum(zombies, axis=-1)

diction={}

diction.setdefault((4,2), {})

diction

run =-1

def parse_step1(Nodes,run):
    tree_dict={}
    List=[]
    track_count = run+1
    run = run + 1
    shift_zombies_per_day()
    for node in Nodes:
        tree= tree_dict
        tree.update({node: {}})
        Zombies = get_zombies(node)# to get rid of 15 days old zombies since they wont move
        x,y = node
        cells = build_neighbor_pos_list((x,y),20,20)
        List.extend(cells)
        total_population = total_population_nbr_cell(cells)
        for positions in cells:
            angle,slope = calcaulte_elevation(node,positions)
            if angle < 10.0 and total_population > 0 :
                nbr_population = calcaute_population(positions)
                tree[node].update({positions: {}})
                zombies_prop = math.ceil(population_propogate(nbr_population,total_population,sum(Zombies),slope))
                update_zombies(node,zombies_prop,positions)
                print("i am here")
        _nested_update(diction, node, tree,run)       
    return List,track_count


(16,40)(315,40)
(16,182)(315,182)

filtered_elevation




filtered_population

#(45,88)is brest and (296,141) is riken




 current pos and next position  (99, 257) (99, 256)
(173373, 504584, 108277, 0.4936728634291669)
zombies going to propagate 18367
sum of zombies here 108277
79000
13400.0
29277
4966.0
value no of zombies 1
[    0. 13400.  4966.     0.     0.     0.     0.     0.     0.     0.
     0.     0.     0.     0.     0.]
[    0 79000 29277     0     0     0     0     0     0     0     0     0
     0     0     0]
gettig issue here [    0 13401  4966     0     0     0     0     0     0     0     0     0
     0     0     0]

partial_zombies =[    0., 13400.,  4966.,     0.,     0.,     0.,     0.,     0.,     0.,     0.,
     0.,     0.,     0.,     0.,     0.]

zombies_current=[    0, 79000, 29277,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     0,     0,     0]


to pad the image with zeros


result = np.zeros(filtered_elevation.shape)

result = np.zeros((282, 282))

result[:filtered_elevation.shape[0],:filtered_elevation.shape[1]] = filtered_elevation

result.shape
Out[442]: (282, 282)

plt.imshow(result, cmap='gray')
plt.show()

len(pixels_path)
Out[683]: 251

node_list=[(48, 4), (49, 5), (50, 6), (50, 7), (49, 8), (50, 9), (51, 10), (51, 11), (52, 12), (51, 13), (52, 14), (53, 15), (52, 16), (53, 17), (52, 18), (51,19), (51, 20), (50, 21), (50, 22), (51, 23), (52, 24), (51, 25), (51, 26), (52, 27), (52, 28), (52, 29), (53, 30), (53, 31), (54, 32), (53, 33),(53, 34), (53, 35), (53, 36), (54, 37), (55, 38), (56, 39), (55, 40), (54, 41), (53, 42), (53, 43), (54, 44), (54, 45), (54, 46), (53, 47), (54, 48),(53, 49), (53, 50), (53, 51), (52, 52), (52, 53), (51, 54), (51, 55), (52, 56), (52, 57), (53, 58), (53, 59), (53, 60), (54, 61), (53, 62), (52, 63),(53, 64), (52, 65), (51, 66), (50, 67), (49, 68), (50, 69), (51, 70), (50, 71), (51, 72), (52, 73), (51, 74), (52, 75), (51, 76), (52, 77), (53, 78),(54, 79), (54, 80), (53, 81), (54, 82), (54, 83), (55, 84), (56, 85), (55, 86), (54, 87), (54, 88), (55, 89), (55, 90), (55, 91), (55, 92), (56, 93),(56, 94), (57, 95), (58, 96), (57, 97), (58, 98), (59, 99), (60, 100), (61, 101), (62, 102), (61, 103), (62, 104), (63, 105), (64, 106), (64, 107),(64, 108), (63, 109), (63, 110), (63, 111), (62, 112), (62, 113), (61, 114), (60, 115), (59, 116), (58, 117), (58, 118), (59, 119), (60, 120), (61,121), (62, 122), (62, 123), (61, 124), (60, 125), (59, 126), (59, 127), (60, 128), (60, 129), (60, 130), (59, 131), (60, 132), (59, 133), (58,134), (59, 135), (58, 136), (59, 137), (60, 138), (61, 139), (62, 140), (62, 141), (63, 142), (62, 143), (63, 144), (62, 145), (63, 146), (64,147), (64, 148), (64, 149), (64, 150), (63, 151), (64, 152), (65, 153), (66, 154), (67, 155), (68, 156), (69, 157), (70, 158), (71, 159), (72,160), (73, 161), (74, 162), (75, 163), (76, 164), (77, 165), (78, 166), (79, 167), (80, 168), (81, 169), (82, 170), (83, 171), (84, 172), (85,173), (86, 174), (87, 175), (88, 176), (89, 177), (90, 178), (91, 179), (92, 180), (93, 181), (94, 182), (95, 183), (96, 184), (97, 185), (98,186), (98, 187), (99, 188), (99, 189), (99, 190), (100, 191), (101, 192), (102, 193), (101, 194), (100, 195), (100, 196), (100, 197), (100, 198),(100, 199), (101, 200), (102, 201), (101, 202), (100, 203), (99, 204), (98, 205), (97, 206), (98, 207), (97, 208), (98, 209), (97, 210), (96, 211),(97, 212), (97, 213), (98, 214), (97, 215), (96, 216), (95, 217), (96, 218), (96, 219), (95, 220), (95, 221), (95, 222), (95, 223), (96, 224), (96,225), (96, 226), (96, 227), (97, 228), (98, 229), (98, 230), (99, 231), (98, 232), (99, 233), (99, 234), (100, 235), (100, 236), (101, 237), (102,238), (101, 239), (101, 240), (101, 241), (102, 242), (102, 243), (101, 244), (101, 245), (101, 246), (102, 247), (101, 248), (101, 249), (101,250), (101, 251), (102, 252), (102, 253), (101, 254)]
